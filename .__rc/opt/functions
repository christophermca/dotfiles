#!/bin/bash

# Functions {{{
###


####
## KILL_PORT()
## usage: killport <port>
####
kill_port() {
  local readonly RESET="\e[m";
  local readonly BLUE="\e[1;34m";
  local readonly GREY="\e[2;37m";
  local readonly COLOR1="\e[0;33m"
  local readonly GREEN=$(tput setaf 2)
  local readonly NORMAL=$(tput sgr0)

  if (( $# == 1 )); then
    local PORT=$1
    local readonly USEDPORT=$(lsof -i :$PORT);

    if [[ -n $USEDPORT ]];
    then
      $(ps -eo pid,command | ag [n]ode | awk "{print $2}" | xargs kill -9 > /dev/null 2>&1 &)
      echo -e "${COL_GREEN} Done!";
    else
      echo -e "${COL_BLUE} Port ${PORT} not in use";
    fi
  else
    echo -e "${BLUE}Usage: killPort <pid>${NORMAL}"
  fi
}

####
## remaster()
## usage: remaster
####

remaster() {
  local readonly CURRENTBRANCH=$(git symbolic-ref --short HEAD)

  git fetch --all

  if [[ -n "$CURRENTBRANCH" ]]; then
    if [[ "$CURRENTBRANCH" != "master" ]]; then
      git checkout master
      git reset --hard upstream/master
      git push origin master
      git checkout $CURRENTBRANCH
      git pull --rebase upstream master
    else
      git reset --hard upstream/master
    fi
  fi
}

####
## attach()
## usage: attach <Optional<session_id>>
####

attach() {
  if type "tmux" > /dev/null; then

    local SESSION=$1

    # TODO should I convert to unix code \e[00m or use tput?
    local readonly GREEN=$(tput setaf 2)
    local readonly NORMAL=$(tput sgr0)

    # if no properties passed to function
    if [ $# -eq 0 ]; then

      # test if tmux is running
      tmux ls >> /dev/null 2>&1
      if [ $? -eq 0 ]; then
        printf "${GREEN}list:________\n${NORMAL}";
        tmux ls -F '#{session_name}'
        printf "\n\nWhat session would you like to attach? " -n
        read SESSION
        $(tmux attach -d -t $SESSION)
      else
        printf "${GREEN}No sessions created\n${NORMAL}"
        read -t 1 -p "starting tmux ... | press ANY key to cancel" || tmux
      fi

    else
      if [ $? -ne 0 ]; then
        $(tmux attach -d -t $SESSION)
      else
        printf "ERR: Could not find session \`${SESSION}\`\n"
      fi
    fi
  fi
}

####
## ex - archive extractor
## usage: ex <file>
####

ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


#}}}

