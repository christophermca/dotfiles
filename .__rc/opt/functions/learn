#!/bin/bash

####
## learn()
## usage: learn
####

learn() {
  local SOURCE_PATH="$HOME/Repos/shiny-dollop"
  local GREEN="\e[32m";
  local RED="\e[31m";
  local NORMAL="\e[0m";
  local PROJECT=""
  local SUBJECT=""

  report_error() {
    if [[ -n $SUBJECT && ! -d $SUBJECT ]]; then
      echo -e "${RED}$1${NORMAL} is not an option\n\n${GREEN}Available Options:"
    else
      echo -e "${GREEN}Available Options (subject):"
    fi
      list_contents $SOURCE_PATH
    };

    list_contents() {
      echo -e "---\n"
      ls $1 -I "README.md"
    };
  is_valid() {
    [[ $SUBJECT =~ ^[a-zA-Z0-9]+$ ]] && found_subject $SUBJECT || report_error $SUBJECT
  };

  found_subject() {
    echo -e "Lets learn ${GREEN}$SUBJECT${NORMAL}!"

    if [[ -n $PROJECT ]]; then
      mark="$SOURCE_PATH/$SUBJECT/$PROJECT"
    else
      mark="$SOURCE_PATH/$SUBJECT"
    fi


    if [[ -z $PROJECT ]]; then
      echo -e "projects: ${GREEN}$PROJECT ${NORMAL}"
      list_contents $mark
    else
      echo "Project: $PROJECT"
      list_contents $mark


    fi
  };

  # TODO Spit helper functions out into its own file.
  usage() {
    echo -e "learn <subject> [-p] <project>\n"
    echo -e "-p, --project <project> \n-h, --help Prints usage\n"
    report_error
  }

  local VALID_ARGS=$(getopt -o hp: --long help,project: -- "$@")

  eval set -- "$VALID_ARGS"
  while [ : ]; do
    case "$1" in
      -h | --help)
        usage
        shift
        return 1
        ;;
      -p | --project)
        PROJECT=$2
        shift 2
        ;;
      --)
        SUBJECT=$2
        shift;
        break
        ;;
    esac

  done

  [[ -n $SUBJECT ]] && is_valid $SUBJECT || usage
}
